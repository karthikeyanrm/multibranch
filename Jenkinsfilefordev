pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIAL_ID = 'kndocker' // Updated credential ID
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs() // Clean the workspace
            }
        }

        stage('Conditional Execution') {
            steps {
                script {
                    def currentBranch = env.GIT_BRANCH
                    // Remove the "origin/" prefix if it exists
                    currentBranch = currentBranch.replaceAll("origin/", "")

                    if (currentBranch ==~ /dev/ || currentBranch ==~ /master/) {
                        // Define the Docker repository name based on the branch
                        def repoName = currentBranch ==~ /dev/ ? 'devrepo' : 'prodrepo'
                        // Define the Docker image tag
                        def imageTag = currentBranch ==~ /dev/ ? 'dev' : 'latest'

                        // Stage for both 'dev' and 'master' branches
                        node {
                            // Run inside a specific node to isolate Docker commands
                            withCredentials([
                                usernamePassword(
                                    credentialsId: DOCKER_HUB_CREDENTIAL_ID,
                                    usernameVariable: 'DOCKER_USERNAME',
                                    passwordVariable: 'DOCKER_PASSWORD'
                                )
                            ]) {
                                sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                                
                                sh "docker pull karthikeyanrm/$repoName:$imageTag"
                                sh "docker run -d -p 80:80 --name reactjscontainer karthikeyanrm/$repoName:$imageTag"
                            }
                        }
                    } else {
                        echo "Branch not recognized: $currentBranch"
                    }
                }
            }
        }
    }
}
