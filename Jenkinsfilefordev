pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIAL_ID = 'kndocker' // Updated credential ID
        CONTAINER_NAME = 'reactjscontainer'
        DEV_IMAGE_NAME = 'karthikeyanrm/devrepo:latest'
        PROD_IMAGE_NAME = 'karthikeyanrm/prodrepo:latest'
    }

    stages {
        stage('Build and Deploy - Dev Branch') {
            when {
                branch 'dev' // This stage will run only on the 'dev' branch
            }
            steps {
                script {
                    // Build Docker Compose or your application
                    sh 'docker-compose build' // Change to your build command if not using Docker Compose

                    // Tag the image
                    sh "docker tag reactjs-demo:latest $DEV_IMAGE_NAME"

                    // Log in to Docker Hub securely
                    withCredentials([
                        usernamePassword(credentialsId: DOCKER_HUB_CREDENTIAL_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'MY_SECURE_PASSWORD')]) {
                        sh "echo \$MY_SECURE_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                        sh "docker push $DEV_IMAGE_NAME"
                    }

                    // Remove local images
                    sh 'docker rmi -f reactjs-demo:latest'
                    sh "docker rmi -f $DEV_IMAGE_NAME"
                }
            }
        }

        stage('Build and Deploy - Master Branch') {
            when {
                branch 'master' // This stage will run only on the 'master' branch
            }
            steps {
                script {
                    // Build Docker Compose or your application
                    sh 'docker-compose build' // Change to your build command if not using Docker Compose

                    // Tag the image
                    sh "docker tag reactjs-demo:latest $PROD_IMAGE_NAME"

                    // Log in to Docker Hub securely
                    withCredentials([
                        usernamePassword(credentialsId: DOCKER_HUB_CREDENTIAL_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'MY_SECURE_PASSWORD')]) {
                        sh "echo \$MY_SECURE_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                        sh "docker push $PROD_IMAGE_NAME"
                    }

                    // Remove local images
                    sh 'docker rmi -f reactjs-demo:latest'
                    sh "docker rmi -f $PROD_IMAGE_NAME"
                }
            }
        }
    }

    post {
        success {
            script {
                emailext to: 'karthisk217@gmail.com',
                subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS',
                body: """The build #${BUILD_NUMBER} was successful. You can view the build log [here](${BUILD_URL}console).

Docker Container Info:
${sh(script: 'docker ps --format "{{.Names}}\\t{{.Ports}}" | awk -F "\\t" -v public_ip=$(curl -s ifconfig.me) \'{print "Container:", $1, "Public IP:", public_ip, "Port Mapping:", $2}\'', returnStdout: true)}
""",
                attachLog: true // Attach build log for success email
            }
        }
        failure {
            script {
                emailext to: 'karthisk217@gmail.com',
                subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS',
                body: "The build #${BUILD_NUMBER} has failed. You can view the build log [here](${BUILD_URL}console)".toString(),
                attachLog: true // Attach build log for failure email
            }
        }
        always {
            // Log out from Docker Hub
            sh 'docker logout'
        }
    }
}
