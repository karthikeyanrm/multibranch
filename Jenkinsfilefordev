pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIAL_ID = 'DOCKER_HUB_CREDENTIAL_ID'
        DOCKER_PASSWORD = credentials('DOCKER_HUB_CREDENTIAL_ID')
    }

    stages {
        stage('Build and Deploy') {
            steps {
                script {
                    // Build Docker Compose
                    sh 'docker-compose build'

                    // Tag the image
                    sh 'docker tag reactjs-demo:latest karthikeyanrm/devrepo:latest'

                    // Log in to Docker Hub securely
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIAL_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD_USR:$DOCKER_PASSWORD_PSW | docker login -u $DOCKER_USERNAME --password-stdin"
                        sh 'docker push karthikeyanrm/devrepo:latest'
                    }

                    // Remove local images
                    sh 'docker rmi -f reactjs-demo:latest'
                    sh 'docker rmi -f karthikeyanrm/devrepo:latest'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Check if any containers with the name "reactjscontainer" are either exited or running
                    containers_to_remove = sh(script: '''
                        # Check if any containers with the name "reactjscontainer" are either exited or running
                        containers_to_remove=$(docker ps -q --filter "name=reactjscontainer" --filter "status=exited" --filter "status=running")

                        if [ -n "$containers_to_remove" ]; then
                          echo "Found exited and/or running containers with the name 'reactjscontainer':"
                          echo "$containers_to_remove"

                          // Stop and forcefully remove the containers
                          docker stop $containers_to_remove
                          docker rm -f $containers_to_remove

                          echo "Containers with the name 'reactjscontainer' have been removed."
                        else {
                          echo "No exited or running containers with the name 'reactjscontainer' found. Proceeding to the next step."
                        }
                    ''', returnStdout: true).trim()

                    // Pull the image
                    sh 'docker pull karthikeyanrm/devrepo:latest'

                    // Run the container
                    sh 'docker run -d -p 80:80 --name reactjscontainer karthikeyanrm/devrepo:latest'
                }
            }
        }
    }

    post {
        success {
            emailext to: 'karthisk217@gmail.com',
            subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS',
            body: """The build #${BUILD_NUMBER} was successful. You can view the build log [here](${BUILD_URL}console).

Docker Container Info:
${sh(script: 'docker ps --format "{{.Names}}\\t{{.Ports}}" | awk -F "\\t" -v public_ip=$(curl -s ifconfig.me) \'{print "Container:", $1, "Public IP:", public_ip, "Port Mapping:", $2}\'', returnStdout: true)}
""",
            attachLog: true // Attach build log for success email
        }
        failure {
            emailext to: 'karthisk217@gmail.com',
            subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS',
            body: "The build #${BUILD_NUMBER} has failed. You can view the build log [here](${BUILD_URL}console)".toString(),
            attachLog: true // Attach build log for failure email
        }
    }
}
